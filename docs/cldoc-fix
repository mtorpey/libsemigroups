#!/usr/bin/env python
'''
  Fix the links in the static site generated by cldoc (anchors are named
  Whatever::method but referred to as Whatever.method) and copies a version of
  the css file which allows independent scrolling of the columns.
'''
import os
import re
import shutil

_NAMESPACE_STD_SIDEBAR = '<li><a href="std.html#std">std<span class="counter"></span></a></li>'
_NAMESPACE_STD_MAIN = '<div class="item"><a href="std.html#std" id="std+std">std</a></div>'

_RE_STD_ALLOCATOR = r',\s*std::allocator&lt;[^&]*&gt;'

_RE_TYPEDEF_NAME = re.compile(r'<tr class="typedef" id="([^"]*)">')
_RE_TYPEDEF_TYPE = re.compile(
    r'<td class="typedef_type"><span class="type"><span class="name ">([^<]*)<')
_RE_ID = r'id="([^"]*)"'


def _main():
    os.chdir('html')
    for filename in os.listdir(os.getcwd()):
        if filename.endswith('.html'):
            print "Fixing links in " + filename
            prefix_old = filename[:-5]
            prefix_new = prefix_old.replace('.', '::')

            readfile = open(filename, 'r')

            content = readfile.read().replace('#' + prefix_old + '.',
                                              '#' + prefix_new + '::')

            iter_id = re.finditer(r'id="' + prefix_old + r'([^"]*)"', content)

            for m_id in iter_id:
                iter_href = re.finditer(r'href="#' + prefix_old + r'([^"]*)"',
                                        content)
                for m_href in iter_href:
                    if m_href.group(1).replace('.', '::') == m_id.group(1):
                        content = content.replace(prefix_old + m_href.group(1),
                                                  prefix_old + m_id.group(1))

            content = content.replace('::__1', '')
            content = re.sub(_RE_STD_ALLOCATOR, '', content, 80)
            content = content.replace('unsigned long', 'size_t', 80)
            content = content.replace(' &gt;', '&gt;', 80)

            readfile.close()

            writefile = open(filename, 'w')
            writefile.write(content)
            writefile.close()

    try:
        print "Removing doc for namespace std"
        readfile = open('index.html', 'r')
        content = readfile.read().replace(_NAMESPACE_STD_SIDEBAR, '')
        content = content.replace(_NAMESPACE_STD_MAIN, '')

        readfile.close()
        writefile = open('index.html', 'w')
        writefile.write(content)
        writefile.close()

    except:
        pass

    print 'Copying docs/cldoc-fixed.css to html/styles/cldoc.css'
    os.chdir('../')

    if (os.path.exists('docs/cldoc-fixed.css') and
            os.path.isfile('docs/cldoc-fixed.css')):
        try:
            shutil.copyfile('docs/cldoc-fixed.css', 'html/styles/cldoc.css')
        except:
            print ('Couldn\'t copy docs/cldoc-fixed.css to '
                   + 'html/styles/cldoc.css for some reason!')
    else:
        print 'Can\'t find docs/cldoc-fixed.css'


if __name__ == '__main__':
    try:
        _main()
    except KeyboardInterrupt:
        print 'Killed!'
